with median_scores as (
  select entry_uid, percentile_cont(0.5) within group (order by score) as score
  from (
    select entry_uid, score
    from votes join entries on votes.entry_uid=entries.uid
    where date_part('year', entries.created_at)='2024'
    and entries.active='t'
    and entries.category='video') as Q
  group by entry_uid
  order by score
),

nb_votes as (
  select entry_uid, count(*) as v
  from votes
  where date_part('year', created_at)='2024'
  group by entry_uid
),

nb_skips as (
  select entry_uid, count(*) as s
  from skips
  where date_part('year', created_at)='2024'
  group by entry_uid
),

quartile as (
  select percentile_cont(0.20) within group (order by score) as value
  from median_scores
)


select uid, score, COALESCE(nb_votes.v,0) + COALESCE(nb_skips.s, 0) as total from entries
left join median_scores on entry_uid=uid
left join nb_votes on entries.uid=nb_votes.entry_uid
left join nb_skips on entries.uid=nb_skips.entry_uid
where score < (select value from quartile)
and COALESCE(nb_votes.v,0) + COALESCE(nb_skips.s, 0) >= 6;

-- update entries set active='f'
-- where uid in (
--   select uid from entries
--   left join median_scores on entry_uid=uid
--   left join nb_votes on entries.uid=nb_votes.entry_uid
--   left join nb_skips on entries.uid=nb_skips.entry_uid
--   where score < (select value from quartile)
--   and COALESCE(nb_votes.v,0) + COALESCE(nb_skips.s, 0) >= 6
-- );
